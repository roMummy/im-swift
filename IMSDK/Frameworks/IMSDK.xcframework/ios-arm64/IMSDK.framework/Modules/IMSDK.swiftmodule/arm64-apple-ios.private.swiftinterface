// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IMSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import IMSDK
import Swift
import UIKit.UIColor
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers final public class File {
  public static func remove(files: [Swift.String]) throws
  public static func move(atPath: Swift.String, toPath: Swift.String) throws
  public static func getSize(ofFiles files: [Swift.String]) throws -> Swift.UInt64
  public static func isExist(atPath path: Swift.String) -> Swift.Bool
  public static func hardlink(atPath source: Swift.String, toPath destination: Swift.String) throws
  public static func createDirectory(atPath path: Swift.String) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMResult : ObjectiveC.NSObject {
  @objc public enum Status : Swift.Int {
    case fail
    case success
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var status: IMSDK.IMResult.Status
  @objc public var meta: Swift.String?
  @objc public var errorMsg: Swift.String?
  @objc public var output: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IMCore : ObjectiveC.NSObject {
  @objc public static let shared: IMSDK.IMCore
  @objc public var progressBlock: ((Swift.Float) -> Swift.Void)?
  @objc public func conver(inputPath: Swift.String, outputPath: Swift.String) -> IMSDK.IMResult
  @objc public func convertToGif(inputPaths: [Swift.String], delay: Swift.Int, outputPath: Swift.String) -> IMSDK.IMResult
  @objc public func addWatermark(mark imagePath: Swift.String, inputPath: Swift.String, outputPath: Swift.String) -> IMSDK.IMResult
  @objc public func addWatermark(text: Swift.String, textColor: UIKit.UIColor, inputPath: Swift.String, outputPath: Swift.String) -> IMSDK.IMResult?
  @objc public func crop(image path: Swift.String, size: CoreFoundation.CGSize, point: CoreFoundation.CGPoint, outputPath: Swift.String) -> IMSDK.IMResult
  @objc public func compress(image path: Swift.String, quality: Swift.Float = 100, resize: CoreFoundation.CGSize, outputPath: Swift.String) -> IMSDK.IMResult
  @objc public func fuzz(bgColor: UIKit.UIColor, toColor: UIKit.UIColor, inputPath: Swift.String, outputPath: Swift.String) -> IMSDK.IMResult
  @objc public func dpi(value: Swift.Float, image: UIKit.UIImage, outputPath: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliConvert(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliIdentify(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliMogrify(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliComposite(cmds: Swift.String) -> IMSDK.IMResult
  @objc public func cliCompare(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliConjure(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliStream(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliImport(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliDisplay(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliAnimate(cmds: Swift.String) -> IMSDK.IMResult
  @discardableResult
  @objc public func cliMontage(cmds: Swift.String) -> IMSDK.IMResult
  @objc deinit
}
extension IMSDK.IMResult.Status : Swift.Equatable {}
extension IMSDK.IMResult.Status : Swift.Hashable {}
extension IMSDK.IMResult.Status : Swift.RawRepresentable {}
